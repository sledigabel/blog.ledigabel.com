<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Actions on Seb&#39;s corner</title>
    <link>https://blog.ledigabel.com/tags/actions/</link>
    <description>Recent content in Actions on Seb&#39;s corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Aug 2020 22:09:43 +0200</lastBuildDate>
    
	<atom:link href="https://blog.ledigabel.com/tags/actions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Finally switched to Github Pages custom domain</title>
      <link>https://blog.ledigabel.com/posts/moved-to-github-custom/</link>
      <pubDate>Wed, 12 Aug 2020 22:09:43 +0200</pubDate>
      
      <guid>https://blog.ledigabel.com/posts/moved-to-github-custom/</guid>
      <description>&lt;h1 id=&#34;i-finally-moved-my-website-to-github-pages-with-custom-domain-and-ssl&#34;&gt;I finally moved my website to Github Pages with custom domain and SSL&lt;/h1&gt;
&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;Previously I explained how I set up &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; to work with
Github Actions and Github Pages.&lt;/p&gt;
&lt;p&gt;It worked out of the box with my previous repo set up for Github Pages (&lt;a href=&#34;http://sledigabel.github.io&#34;&gt;http://sledigabel.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There are several documentations on how to set it up with your custom domain. TL;DR: you have to set up a CNAME record in your custom domain name DNS manager and make it point to your github.io website.&lt;/p&gt;
&lt;p&gt;This is great, but while the github.io domain works with SSL out of the box (using Let&amp;rsquo;s encrypt in the background to generate a certificate), it did not work with a custom domain because my repository was primarily set up for a github.io endpoint not a custom domain.
Bottom line: the CNAME works and does its job but then the SSL certificate generated by Let&amp;rsquo;s encrypt has no knowledge of it and your browser righly assumes the certificate is invalid for the endpoint you&amp;rsquo;re trying to access it from.&lt;/p&gt;
&lt;p&gt;In this instance, the endpoint is (blog.ledigabel.com) and I wanted to make this work.&lt;/p&gt;
&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;p&gt;I had to recreate a new repository for this specific new endpoint. The problem was the github page website was created before custom domains were a thing, and so it was upgraded using custom domain with the CNAME trick rather than properly setup.&lt;/p&gt;
&lt;p&gt;I mainly followed the steps &lt;a href=&#34;https://github.blog/2018-05-01-github-pages-custom-domains-https/&#34;&gt;here&lt;/a&gt;.
I also found &lt;a href=&#34;https://varunpatil.me/blog/posts/https-with-github-pages-custom-domain/&#34;&gt;this article&lt;/a&gt; very useful, more of a step-by-step walkthrough.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll basically write a quick summary of the steps I took:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new repository &lt;code&gt;blog.ledigabel.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate a static website with &lt;code&gt;Hugo&lt;/code&gt; and copy the files over to the new repository.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;CNAME&lt;/code&gt; file with content: &amp;ldquo;blog.ledigabel.com&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In &lt;em&gt;Settings&lt;/em&gt;, Add a custom domain name under &amp;ldquo;Github pages&amp;rdquo; and tick &amp;ldquo;Enforce HTTPS&amp;rdquo;.
&lt;img src=&#34;https://blog.ledigabel.com/images/Github_custom_domain_https.png&#34; alt=&#34;Github settings&#34;&gt;&lt;/li&gt;
&lt;li&gt;Update the master hugo repository (containing the templated files), remove the old submodule with the new one&lt;/li&gt;
&lt;li&gt;Update Github Actions to update the new repository&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The word that comes to my mind is easy peasy. I was under the impression that, as it used to be the case, only repositories called &lt;code&gt;*.github.io&lt;/code&gt; could be used as Github Pages, but virtually any one would do. I&amp;rsquo;m considering doing the same thing for my static about page now. Any repository can now be used to work as a static website. I can now see why people are using this all the time.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
