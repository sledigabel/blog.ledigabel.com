<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Seb&#39;s corner</title>
    <link>https://blog.ledigabel.com/</link>
    <description>Recent content on Seb&#39;s corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 Aug 2020 22:09:43 +0200</lastBuildDate>
    
	<atom:link href="https://blog.ledigabel.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Finally switched to Github Pages custom domain</title>
      <link>https://blog.ledigabel.com/posts/moved-to-github-custom/</link>
      <pubDate>Wed, 12 Aug 2020 22:09:43 +0200</pubDate>
      
      <guid>https://blog.ledigabel.com/posts/moved-to-github-custom/</guid>
      <description>&lt;h1 id=&#34;i-finally-moved-my-website-to-github-pages-with-custom-domain-and-ssl&#34;&gt;I finally moved my website to Github Pages with custom domain and SSL&lt;/h1&gt;
&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;Previously I explained how I set up &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; to work with
Github Actions and Github Pages.&lt;/p&gt;
&lt;p&gt;It worked out of the box with my previous repo set up for Github Pages (&lt;a href=&#34;http://sledigabel.github.io&#34;&gt;http://sledigabel.github.io&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There are several documentations on how to set it up with your custom domain. TL;DR: you have to set up a CNAME record in your custom domain name DNS manager and make it point to your github.io website.&lt;/p&gt;
&lt;p&gt;This is great, but while the github.io domain works with SSL out of the box (using Let&amp;rsquo;s encrypt in the background to generate a certificate), it did not work with a custom domain because my repository was primarily set up for a github.io endpoint not a custom domain.
Bottom line: the CNAME works and does its job but then the SSL certificate generated by Let&amp;rsquo;s encrypt has no knowledge of it and your browser righly assumes the certificate is invalid for the endpoint you&amp;rsquo;re trying to access it from.&lt;/p&gt;
&lt;p&gt;In this instance, the endpoint is (blog.ledigabel.com) and I wanted to make this work.&lt;/p&gt;
&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;p&gt;I had to recreate a new repository for this specific new endpoint. The problem was the github page website was created before custom domains were a thing, and so it was upgraded using custom domain with the CNAME trick rather than properly setup.&lt;/p&gt;
&lt;p&gt;I mainly followed the steps &lt;a href=&#34;https://github.blog/2018-05-01-github-pages-custom-domains-https/&#34;&gt;here&lt;/a&gt;.
I also found &lt;a href=&#34;https://varunpatil.me/blog/posts/https-with-github-pages-custom-domain/&#34;&gt;this article&lt;/a&gt; very useful, more of a step-by-step walkthrough.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll basically write a quick summary of the steps I took:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new repository &lt;code&gt;blog.ledigabel.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generate a static website with &lt;code&gt;Hugo&lt;/code&gt; and copy the files over to the new repository.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;CNAME&lt;/code&gt; file with content: &amp;ldquo;blog.ledigabel.com&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In &lt;em&gt;Settings&lt;/em&gt;, Add a custom domain name under &amp;ldquo;Github pages&amp;rdquo; and tick &amp;ldquo;Enforce HTTPS&amp;rdquo;.
&lt;img src=&#34;https://blog.ledigabel.com/images/Github_custom_domain_https.png&#34; alt=&#34;Github settings&#34;&gt;&lt;/li&gt;
&lt;li&gt;Update the master hugo repository (containing the templated files), remove the old submodule with the new one&lt;/li&gt;
&lt;li&gt;Update Github Actions to update the new repository&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The word that comes to my mind is easy peasy. I was under the impression that, as it used to be the case, only repositories called &lt;code&gt;*.github.io&lt;/code&gt; could be used as Github Pages, but virtually any one would do. I&amp;rsquo;m considering doing the same thing for my static about page now. Any repository can now be used to work as a static website. I can now see why people are using this all the time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set up Hugo and Github actions</title>
      <link>https://blog.ledigabel.com/posts/hugo-and-github-actions/</link>
      <pubDate>Thu, 21 May 2020 08:43:54 +0100</pubDate>
      
      <guid>https://blog.ledigabel.com/posts/hugo-and-github-actions/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;Hugo is a powerful static blog generator, Github pages can host a static website from a github repository, Github actions can trigger automation based on commits. It is like those three things were made to come together.&lt;/p&gt;
&lt;h1 id=&#34;hugo&#34;&gt;Hugo&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; is a powerful static blog generator written in Go.
It has great features, great themes and a large community, so when I was looking for a static website generator I didn&amp;rsquo;t look further.&lt;/p&gt;
&lt;h2 id=&#34;the-get-started-bit&#34;&gt;The Get-Started bit&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;The &lt;em&gt;standard&lt;/em&gt; way of running hugo is&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Initialise your Hugo site and create a new repository for your blog&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new site MySite
cd MySite
git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Install a theme&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the theme is recommended to be installed as a submodule.&lt;/li&gt;
&lt;li&gt;I &lt;em&gt;personally&lt;/em&gt; cloned the theme to allow personal tweaks but also to track changes separately from the upstream repo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find my cloned theme &lt;a href=&#34;https://github.com/sledigabel/hugo-coder&#34;&gt;here&lt;/a&gt;. It&amp;rsquo;s a clone from &lt;a href=&#34;https://github.com/luizdepra/hugo-coder,&#34;&gt;https://github.com/luizdepra/hugo-coder,&lt;/a&gt; which I think looks amazing.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Add content and render your website&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo new posts/my-first-post.md
&lt;span style=&#34;color:#75715e&#34;&gt;# edit the content/posts/my-first-post.md&lt;/span&gt;
hugo server -D &lt;span style=&#34;color:#75715e&#34;&gt;# will run a local website and continuously refresh the content&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Generate your static website.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;hugo -D &lt;span style=&#34;color:#75715e&#34;&gt;# all content is created in ./public/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Now what?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You&amp;rsquo;re meant to take all files in the public directory and copy it into your web server, ready to serve requests.
Typically you&amp;rsquo;d use SFTP, or upload the content to S3 using static pages.&lt;/p&gt;
&lt;h1 id=&#34;github&#34;&gt;GitHub&lt;/h1&gt;
&lt;h2 id=&#34;github-pages&#34;&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;Github has been offering &lt;a href=&#34;https://pages.github.com/&#34;&gt;web hosting&lt;/a&gt; as part of &lt;a href=&#34;https://en.wikipedia.org/wiki/GitHub#GitHub_Pages&#34;&gt;its free tier for a long time&lt;/a&gt;.
In a nutshell, the content of the git repo is exposed statically in a web server under your &lt;code&gt;&amp;lt;account_id&amp;gt;.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s just about a million posts from various people about how to use them.
To name a few:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;Hugo and hosting pages on github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@svinkle/publish-and-share-your-own-website-for-free-with-github-2eff049a1cb5&#34;&gt;A blog post about getting started by Scott Vinkle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.teamtreehouse.com/using-github-pages-to-host-your-website&#34;&gt;Same from Matt West at Treehouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You get the idea.&lt;/p&gt;
&lt;h2 id=&#34;github-action&#34;&gt;Github action&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s where things get really interesting.
&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github Actions&lt;/a&gt; was introduced by Github &lt;a href=&#34;https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/&#34;&gt;not too long ago&lt;/a&gt;.
It&amp;rsquo;s got a free tier, providing you run your automation on linux and you&amp;rsquo;re not hammering their servers.&lt;/p&gt;
&lt;p&gt;Again, plenty of tutorials and excellent documentation online. The gist of it is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CI/CD configuration stored in a &lt;code&gt;.github&lt;/code&gt; directory as YAML or JSON&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Actions&amp;rdquo; are essentially off-the-shelf containers (rebuilt or generated at run time), you can pick some from the market place or come up with your own.&lt;/li&gt;
&lt;li&gt;Integration with the github UI, get quick feedback on commits, push or PRs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;set-up&#34;&gt;Set up&lt;/h1&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;p&gt;The various repositories used in this setup are listed as follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A repository containing the hugo sources.&lt;/li&gt;
&lt;li&gt;A repository cloned from upstream as a hugo theme&lt;/li&gt;
&lt;li&gt;A repository containing the static website (Github pages)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both theme and website repositories are set up as submodules from the main hugo
sources one. The reason behind this is to make it easy to automate it from github action that is very single repository centric.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.ledigabel.com/images/hugo-git-repos.png&#34; alt=&#34;Hugo repositories setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;It makes it pretty easy to tie in Hugo sources changes with the website rendering
and the theme used during the website production.&lt;/p&gt;
&lt;h2 id=&#34;github-action-1&#34;&gt;GitHub action&lt;/h2&gt;
&lt;p&gt;The Github action is triggering on push and follows a relatively straightforward
path, that is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Checkout, + submodules&lt;/li&gt;
&lt;li&gt;Remove the old generated static website&lt;/li&gt;
&lt;li&gt;Generate the new website&lt;/li&gt;
&lt;li&gt;Push new website content&lt;/li&gt;
&lt;li&gt;Update new website revision on master repo&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can find the gist of it here:
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/sledigabel/ecacbdddedad31fc7a8a39690c4828e4.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experimenting with Helm Operator with minikube</title>
      <link>https://blog.ledigabel.com/posts/helm-operator/</link>
      <pubDate>Sat, 25 Apr 2020 13:36:22 +0100</pubDate>
      
      <guid>https://blog.ledigabel.com/posts/helm-operator/</guid>
      <description>&lt;h1 id=&#34;experimenting-with-helm-operator-with-minikube&#34;&gt;Experimenting with Helm Operator with minikube&lt;/h1&gt;
&lt;figure&gt;&lt;a href=&#34;https://helm.sh&#34;&gt;
    &lt;img src=&#34;https://blog.ledigabel.com/images/helm.svg&#34; width=&#34;10%&#34;/&gt; &lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;helm&#34;&gt;Helm&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt; is a package manager for Kubernetes.
Its aim is to abstract the multiple resources required for a system, say Prometheus for instance, to be installed and wrap it in a convenient and distributable artifact.&lt;/p&gt;
&lt;p&gt;It provides tunables (variables) so that Helm users can tweak their installs based on their own requirements.&lt;/p&gt;
&lt;h3 id=&#34;a-word-on-helm-v3&#34;&gt;A word on Helm V3&lt;/h3&gt;
&lt;p&gt;Helm V3 was released in November 2019 and differenciate itself from the previous major release (v2) in that it does no longer require a backend (Tiller) to run in order to act on the target cluster.&lt;/p&gt;
&lt;p&gt;Helm now ships in a single binary, a client, that can manage packages and deploy them without requiring any further setup.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://helm.sh/blog/helm-3-released/&#34;&gt;here&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&#34;helm-operator&#34;&gt;Helm Operator&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fluxcd/helm-operator&#34;&gt;Helm Operator&lt;/a&gt; is a &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&#34;&gt;Kubernetes Operator&lt;/a&gt; developed by &lt;a href=&#34;https://www.weave.works/&#34;&gt;WeaveWorks&lt;/a&gt; and part of the &lt;a href=&#34;https://github.com/fluxcd&#34;&gt;FluxCD&lt;/a&gt; bundle and the CNCF family.&lt;/p&gt;
&lt;p&gt;It does what it says on the tin; it&amp;rsquo;s an operator that deploys Helm Charts from a CRD.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a high level walkthrough of the Helm Operator &lt;a href=&#34;https://docs.fluxcd.io/projects/helm-operator/en/stable/&#34;&gt;here&lt;/a&gt;, demonstrated coupled with Flux though this is not required.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://docs.fluxcd.io/projects/helm-operator/en/stable/_files/fluxcd-helm-operator-diagram.png&#34; width=&#34;100%&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The CRD specifications can be found &lt;a href=&#34;https://docs.fluxcd.io/projects/helm-operator/en/stable/references/helmrelease-custom-resource/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;installation-on-minikube&#34;&gt;Installation on minikube&lt;/h2&gt;
&lt;h3 id=&#34;minkube&#34;&gt;Minkube&lt;/h3&gt;
&lt;p&gt;The current version of the charts is providing resources from an older version of the API (current k8s=&lt;code&gt;1.18&lt;/code&gt;).
We have to create a cluster which version is a bit behind to get the right versions of the API resources.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;minikube start --kubernetes-version 1.15.1 --cpus &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; --memory &lt;span style=&#34;color:#ae81ff&#34;&gt;8192&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;helm-operator-1&#34;&gt;Helm Operator&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;re following the official &lt;a href=&#34;https://docs.fluxcd.io/projects/helm-operator/en/stable/get-started/using-helm/&#34;&gt;guide&lt;/a&gt; and we have to install first the CRD.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/1.0.1/deploy/crds.yaml
customresourcedefinition.apiextensions.k8s.io/helmreleases.helm.fluxcd.io created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we add the flux helm repository to our local environment&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ helm repo add fluxcd https://charts.fluxcd.io
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fluxcd&amp;#34;&lt;/span&gt; has been added to your repositories&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then installing the operator in its own namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl create namespace flux
namespace/flux created
$ helm upgrade -i helm-operator fluxcd/helm-operator &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;flux &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --set helm.versions&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v3
Release &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;helm-operator&amp;#34;&lt;/span&gt; does not exist. Installing it now.
NAME: helm-operator
LAST DEPLOYED: Sat Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; 14:39:46 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
NAMESPACE: flux
STATUS: deployed
REVISION: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
TEST SUITE: None
NOTES:
Flux Helm Operator docs https://docs.fluxcd.io
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check your deploy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;helm status helm-operator --namespace flux
NAME: helm-operator
LAST DEPLOYED: Fri Apr &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt; 16:56:19 &lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;
NAMESPACE: flux
STATUS: deployed
REVISION: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
TEST SUITE: None
NOTES:
Flux Helm Operator docs https://docs.fluxcd.io&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Helm is kind enough to give you some notes and guides on how to use the Helm Operator.
At the end of the install it tells you you can use &lt;code&gt;kubectl get hr&lt;/code&gt;.
&lt;code&gt;hr&lt;/code&gt; are &lt;code&gt;HelmReleases&lt;/code&gt;, the CRD we&amp;rsquo;ve created earlier on.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s have a look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get hr
No resources found.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ve not deployed anything yet so that makes sense.&lt;/p&gt;
&lt;h2 id=&#34;installing-prometheus&#34;&gt;Installing Prometheus&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s move to the fun bit; Let&amp;rsquo;s deploy something.
We could deploy Prometheus for instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;helm.fluxcd.io/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;HelmRelease&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;releaseName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;chart&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;prometheus&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;repository&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://kubernetes-charts.storage.googleapis.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10.4.0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;values&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NodePort&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ cat &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: helm.fluxcd.io/v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[...]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
helmrelease.helm.fluxcd.io/prometheus created&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s see!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl get hr
NAME         RELEASE      PHASE       STATUS     MESSAGE                                                              AGE
prometheus   prometheus   Succeeded   deployed   Release was successful &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Helm release &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;prometheus&amp;#39;&lt;/span&gt; in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;.   44s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We notice that the CRD is very similar to what you&amp;rsquo;d expect to pass to the helm client, that makes sense.
The feedback you get is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Phase (where you are in the helm deployment process)&lt;/li&gt;
&lt;li&gt;Status (current state of your deploy)&lt;/li&gt;
&lt;li&gt;Message (feedback from helm in the last phase)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can get all the details of the previous phases, it&amp;rsquo;s all in the CRD.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;items&amp;#34;&lt;/span&gt;: [
        {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;helm.fluxcd.io/v1&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HelmRelease&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kubectl.kubernetes.io/last-applied-configuration&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{\&amp;#34;apiVersion\&amp;#34;:\&amp;#34;helm.fluxcd.io/v1\&amp;#34;,\&amp;#34;kind\&amp;#34;:\&amp;#34;HelmRelease\&amp;#34;,\&amp;#34;metadata\&amp;#34;:{\&amp;#34;annotations\&amp;#34;:{},\&amp;#34;name\&amp;#34;:\&amp;#34;prometheus\&amp;#34;,\&amp;#34;namespace\&amp;#34;:\&amp;#34;default\&amp;#34;},\&amp;#34;spec\&amp;#34;:{\&amp;#34;chart\&amp;#34;:{\&amp;#34;name\&amp;#34;:\&amp;#34;prometheus\&amp;#34;,\&amp;#34;repository\&amp;#34;:\&amp;#34;https://kubernetes-charts.storage.googleapis.com\&amp;#34;,\&amp;#34;version\&amp;#34;:\&amp;#34;10.4.0\&amp;#34;},\&amp;#34;releaseName\&amp;#34;:\&amp;#34;prometheus\&amp;#34;,\&amp;#34;values\&amp;#34;:{\&amp;#34;service\&amp;#34;:{\&amp;#34;type\&amp;#34;:\&amp;#34;NodePort\&amp;#34;}}}}\n&amp;#34;&lt;/span&gt;
                },
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;creationTimestamp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-25T13:49:51Z&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;generation&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resourceVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1636&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;selfLink&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/apis/helm.fluxcd.io/v1/namespaces/default/helmreleases/prometheus&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;uid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e23ff1fd-8d61-46ee-8527-40c4a8315cc6&amp;#34;&lt;/span&gt;
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;chart&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://kubernetes-charts.storage.googleapis.com&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.4.0&amp;#34;&lt;/span&gt;
                },
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;releaseName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;values&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NodePort&amp;#34;&lt;/span&gt;
                    }
                }
            },
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;conditions&amp;#34;&lt;/span&gt;: [
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lastTransitionTime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-25T13:50:00Z&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lastUpdateTime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-25T13:50:00Z&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Chart fetch was successful for Helm release &amp;#39;prometheus&amp;#39; in &amp;#39;default&amp;#39;.&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reason&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ChartFetched&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ChartFetched&amp;#34;&lt;/span&gt;
                    },
                    {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lastTransitionTime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-25T13:50:01Z&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;lastUpdateTime&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2020-04-25T13:50:01Z&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Release was successful for Helm release &amp;#39;prometheus&amp;#39; in &amp;#39;default&amp;#39;.&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;reason&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Succeeded&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Released&amp;#34;&lt;/span&gt;
                    }
                ],
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;observedGeneration&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;phase&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Succeeded&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;releaseName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;prometheus&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;releaseStatus&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deployed&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;revision&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;10.4.0&amp;#34;&lt;/span&gt;
            }
        }
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;List&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;resourceVersion&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;selfLink&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;installing-chartmuseum&#34;&gt;Installing Chartmuseum&lt;/h2&gt;
&lt;p&gt;For the next bit we&amp;rsquo;ll install &lt;a href=&#34;https://chartmuseum.com/&#34;&gt;Chart Museum&lt;/a&gt;. It&amp;rsquo;s an open source repository for Helm Charts. N.T.D.L.: it&amp;rsquo;s important for the Helm Operator to have direct access to the Chart Museum for future use; that&amp;rsquo;s why we&amp;rsquo;re colocating it in the same namespace in this example;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;helm.fluxcd.io/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;HelmRelease&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;chartmuseum&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;flux&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;releaseName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;chartmuseum&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;chart&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;chartmuseum&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;repository&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;https://kubernetes-charts.storage.googleapis.com&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2.12.0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;values&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;service&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;NodePort&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;open&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;DISABLE_API&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pushing this CRD to Kubernetes Helm Operator would give us:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;minikube service chartmuseum-chartmuseum --url&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Welcome to ChartMuseum!&amp;lt;/title&amp;gt;
&amp;lt;style&amp;gt;
    body &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        width: 35em;
        margin: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Welcome to ChartMuseum!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;If you see this page, the ChartMuseum web server is successfully installed and
working.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;For online documentation and support please refer to the
&amp;lt;a href&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://github.com/helm/chartmuseum&amp;#34;&lt;/span&gt;&amp;gt;GitHub project&amp;lt;/a&amp;gt;.&amp;lt;br/&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;em&amp;gt;Thank you &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; using ChartMuseum.&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;looping-the-loop&#34;&gt;Looping the loop&lt;/h2&gt;
&lt;p&gt;We have Chart Museum, a Helm Chart repository hosted in Kubernetes and desperately waiting to do something. Now let&amp;rsquo;s push something there. We can use one of my personal projects &lt;a href=&#34;https://github.com/sledigabel/3-tier-python.git&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git clone https://github.com/sledigabel/3-tier-python.git
Cloning into &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3-tier-python&amp;#39;&lt;/span&gt;...
remote: Enumerating objects: 55, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
remote: Counting objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;55/55&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
remote: Compressing objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;39/39&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
remote: Total &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 22&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, reused &lt;span style=&#34;color:#ae81ff&#34;&gt;45&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;delta 13&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, pack-reused &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
Unpacking objects: 100% &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;55/55&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;.
$ cd 3-tier-python/app3tierpython
$ helm dependency build &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; helm package .
Hang tight &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; we grab the latest from your chart repositories...
Update Complete. ⎈Happy Helming!⎈
Saving &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; charts
Downloading redis from repo https://kubernetes-charts.storage.googleapis.com
Deleting outdated charts
Successfully packaged chart and saved it to: /Users/sebastienledigabel/dev/temp/3-tier-python/app3tierpython/app3tierpython-0.1.0.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How we have a Helm Chart for the app (which has a built-in dependency to redis), ready to be pushed to the Chart Museum.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl -XPOST --data-binary &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@app3tierpython-0.1.2.tgz&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;minikube service chartmuseum-chartmuseum --url&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/api/charts
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;saved&amp;#34;&lt;/span&gt;:true&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can deploy the app3tierpython hosted on the chart museum.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;helm.fluxcd.io/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;HelmRelease&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;app3tierpython &lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;releaseName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;app3tierpython&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;chart&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;app3tierpython&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;repository&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;http://chartmuseum-chartmuseum:8080&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.1.2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What does Helm Operator say?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kubectl describe hr app3tierpython
Name:         app3tierpython
Namespace:    default
Labels:       &amp;lt;none&amp;gt;
Annotations:  kubectl.kubernetes.io/last-applied-configuration:
                &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;apiVersion&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;helm.fluxcd.io/v1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kind&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HelmRelease&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;metadata&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;annotations&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app3tierpython&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;namespace&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spec&amp;#34;&lt;/span&gt;:...
API Version:  helm.fluxcd.io/v1
Kind:         HelmRelease
Metadata:
  Creation Timestamp:  2020-04-28T09:15:53Z
  Generation:          &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  Resource Version:    &lt;span style=&#34;color:#ae81ff&#34;&gt;101480&lt;/span&gt;
  Self Link:           /apis/helm.fluxcd.io/v1/namespaces/default/helmreleases/app3tierpython
  UID:                 bf8712e5-d083-40c0-ac33-e671f9572f00
Spec:
  Chart:
    Name:        app3tierpython
    Repository:  http://chartmuseum-chartmuseum:8080
    Version:     0.1.2
  Release Name:  app3tierpython
Status:
  Conditions:
    Last Transition Time:  2020-04-28T09:15:53Z
    Last Update Time:      2020-04-28T09:15:53Z
    Message:               Release was successful &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Helm release &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app3tierpython&amp;#39;&lt;/span&gt; in &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;.
    Reason:                Succeeded
    Status:                True
    Type:                  Released
  Observed Generation:     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  Phase:                   Succeeded
  Release Name:            app3tierpython
  Release Status:          deployed
  Revision:                0.1.2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Helm Operator works pretty nicely with a simple CRD that is matching more or less what you can do with the &lt;code&gt;helm&lt;/code&gt; client.
An interesting thing is that you &lt;em&gt;can&lt;/em&gt; view the state of your helm deployments with the classic &lt;code&gt;helm&lt;/code&gt; cli. But what you cannot do is have an interactive view of what has been deployed through the &lt;code&gt;helm&lt;/code&gt; cli with the Help Operator, as it is declarative and would compare the custom resources with the real world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first post!</title>
      <link>https://blog.ledigabel.com/posts/my-first-post/</link>
      <pubDate>Wed, 09 Oct 2019 11:33:46 +0100</pubDate>
      
      <guid>https://blog.ledigabel.com/posts/my-first-post/</guid>
      <description>&lt;h1 id=&#34;new-post-new-site-new-life&#34;&gt;New post, new site, new life&lt;/h1&gt;
&lt;p&gt;Hello readers :-) welcome to my blog.&lt;/p&gt;
&lt;p&gt;Got some time to try out &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and actually start a blog.
Will post here some findings, investigations and other things.&lt;/p&gt;
&lt;p&gt;Stay tuned ;-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
